name:                hout
version:             0.1.0.0
synopsis:            Non-interactive proof assistant monad for first-order logic.
description:         Hout is an in-Haskell non-interactive proof assistant for
                     intuitionistic first-order logic, using Haskell's type
                     system. If a proof written in Hout compiles, it is correct.
                     .
                     Alternatively, Hout provides an indexed monad which,
                     combined with Haskell's do notation, allows for writing
                     Haskell code in the style of proof assistants.
                     .
                     The main part of Hout's value is found in
                     "Hout.Prover.Tactics", which defines the @Tactic@ monad
                     and several proof tactics similar to those found in Coq.
                     Other useful defintions for using Hout can be found in
                     "Hout.Prover.Proofs".

homepage:            https://github.com/ivanbakel/hout-prover#readme
license:             BSD3
license-file:        LICENSE
author:              Isaac van Bakel
maintainer:          ivb@vanbakel.io
copyright:           2020 Isaac van Bakel
category:            Web
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10

library
  hs-source-dirs:      src
  exposed-modules:     Hout.Logic.Intuitionistic
                     , Hout.Logic.FirstOrder
                     , Hout.Prover.Tactics
                     , Hout.Prover.Proofs
  build-depends:       base >= 4.7 && < 5
                     , indexed
  default-language:    Haskell2010

test-suite examples
  type: exitcode-stdio-1.0
  main-is: Examples.hs
  hs-source-dirs:
    examples
  build-depends:       base >= 4.7 && < 5
                     , indexed
                     , do-notation
                     , hout
  other-modules:       Hout.Examples
  default-language:    Haskell2010
  

source-repository head
  type:     git
  location: https://github.com/ivanbakel/hout-prover
